<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-10T19:22:05+02:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">How to make a web page</title><link href="/jekyll/update/2023/08/10/how-to-make-a-web-page.html" rel="alternate" type="text/html" title="How to make a web page" /><published>2023-08-10T17:54:28+02:00</published><updated>2023-08-10T17:54:28+02:00</updated><id>/jekyll/update/2023/08/10/how-to-make-a-web-page</id><content type="html" xml:base="/jekyll/update/2023/08/10/how-to-make-a-web-page.html"><![CDATA[<h1 id="make-a-web-page-with-jekyll">Make a web page with Jekyll</h1>
<p>The first assignment is a two part task. One make a web page and that’s what this post will be about, how I made a web page with <em>Jekyll</em> without having any prior knowlage about web development. We’ll host the site on <strong>GitHub</strong>.</p>

<h1 id="befor-starting">Befor starting</h1>
<p>Before one starts with the page there are a couple ting that needs to be done. Not all of the  following points are mandatory, but the way i did it one will need to have instaled all the programms.</p>
<ol>
  <li>Homebrew</li>
  <li>Ruby</li>
  <li>Jekyll</li>
  <li><em><a href="https://code.visualstudio.com/download">VS Code</a></em></li>
  <li><em><a href="https://desktop.github.com">GitHub Desktop</a></em></li>
</ol>

<p>To install Homebrew, Ruby and Jekyll, there is a step by step guide on:
<a href="https://jekyllrb.com/docs/installation/macos/">https://jekyllrb.com/docs/installation/macos/</a></p>

<h1 id="repository-from-github">Repository from <em>GitHub</em></h1>
<p>Make a new repository. To make a repository for a web page one will need to name the repository a special way. <em>username</em>.github.io. For me it was <em>MaxThyes.github.io</em>. When you have made the repository, make a local copy with <em>GitHub Desktop</em>.</p>

<h1 id="making-the-web-page-with-jekyll">Making the web page with <em>Jekyll</em></h1>
<p>I did not manage to get <em>Jekyll</em> to build the web page inn the folder I wanted. So I “cheated” and buldt one on my desktop and copied the files <em>Jekyll</em> made to the folder I wanted.
In the terminal navigete to the desktop. Use the following command:
<strong>jekyll new <em>name the project</em></strong>
I use <em>jekyll new ADA525</em>. <em>Jekyll</em> now made all files needed to make a web page, with a eksample theme. To build the page one need to navigate into the folder added by <em>Jekyll</em> and use the following command:
<strong>jekyll serve</strong>
One can now go to a web browser and use the following address:<em>localhost:4000</em>. This is a local host of ones web page.
In the terminal, press <em>ctrl-c</em> to stop the local host.
Now copy all the files from the folder <em>Jekyll</em> made to the folder made by <em>GitHub Desktop</em>. Commit and push all the files to ones online repository. This will take some time the first try. To make sure <em>GitHub</em> konws what file to start with. Go to <strong>github.com/”username”/”username#.github.io</strong> -&gt; <strong>Settings</strong> -&gt; <strong>Pages</strong> and check <em>Branch</em>, one wants to have selected <em>main</em> and <em>/root</em></p>

<h1 id="adjust-the-templet-and-add-posts">Adjust the templet and add posts</h1>
<p>The page that was just made is an example page filled with example content. Go to the first post on the page and there are an instruction on how to add posts and change the content on the page. When adding new posts one must remember formatting the file name and the location to save the file. All this is mentioned in the first post. One of the advantages of <em>Jekyll</em> is that one can write the files with <em>markdown</em> and <em>Jekyll</em> converts it to HTML. When a new post is added to the <em>_posts</em> folder one will need to tell <em>Jekyll</em> a new post is added. To do this open the terminal, navigate to the folder of your page and use the following command:
<strong>jekyll build</strong>
Open <em>GItHub Desktop</em>, commit and push the new post.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Make a web page with Jekyll The first assignment is a two part task. One make a web page and that’s what this post will be about, how I made a web page with Jekyll without having any prior knowlage about web development. We’ll host the site on GitHub. Befor starting Before one starts with the page there are a couple ting that needs to be done. Not all of the following points are mandatory, but the way i did it one will need to have instaled all the programms. Homebrew Ruby Jekyll VS Code GitHub Desktop]]></summary></entry><entry><title type="html">Hvordan lage en nettsied</title><link href="/jekyll/update/2023/08/10/hvordan-lage-netside.html" rel="alternate" type="text/html" title="Hvordan lage en nettsied" /><published>2023-08-10T09:54:28+02:00</published><updated>2023-08-10T09:54:28+02:00</updated><id>/jekyll/update/2023/08/10/hvordan-lage-netside</id><content type="html" xml:base="/jekyll/update/2023/08/10/hvordan-lage-netside.html"><![CDATA[<h1 id="lag-nettside-med-jekyll">Lag nettside med Jekyll</h1>
<p>Første gjøremål for faget ADA525 som undervises ved HVL skal man lage seg en nettside. Den skal være være på <strong>github.io</strong>. Dette er da et forsøk på å</p>

<h2 id="før-man-starter">Før man starter</h2>
<p>Før man kan sette i gang med nettsiden er det et par ting som må være på plass. Det er følgende:</p>
<ol>
  <li>Honedew</li>
  <li>Ruby</li>
  <li>Jekyll</li>
  <li>GitHub Desktop</li>
  <li>VS Code</li>
</ol>

<p>Punkt 4 og 5 er valgfrie men jeg valgte å bruke disse programmene. De 3 første punktene kan gjøres ved å følge instruksjoen som er på denne siden:
<a href="https://jekyllrb.com/docs/installation/macos/">https://jekyllrb.com/docs/installation/macos/</a></p>

<h2 id="side-fra-githubio">Side fra github.io</h2>
<p>Her lager man et ny repositori. I navnet på repositori’et må man ha <em>brukernavn</em>.github.io. I mitt tilfelle ble det MaxThyes.github.io. Når repositori’et er laget kan man åpne det i <em>GitHub Desktop</em>. Det blir nå laget en lokal mappe på din mac med navnet på repositori’et som mappenavn.</p>

<h2 id="lag-nettsiden">Lag nettsiden</h2>
<p>Her “jukset” jeg litt å brukte jekyll sin eksempel nettside. Følgende måte ble brukt for å leg siden.
I terminalen navigere man seg til hvor man ønsker å lagre siden.Jeg valgte å lagre denne på skriveborde. Når man er i mappen man vil lagre siden bruker man følgende komando:
<strong>jekyll new <em>navn på filen</em></strong> 
Det lages nå en jekylleksempel side. For å bygge siden kan man må man navigere seg inn i den ny opprettede mappen. og bruke følgende komando for å bygge siden.
<strong>jekyll serve</strong>
Kopier alt innholde i mappen inn mappen som ble opprette av GitHub Desktop, altså mappen med repossitori nevnet. Da gjenstår bare å commit og push for å få siden på nett. Dette tar tid for github å lage nettsiden. Så nå er det bare å vente.</p>

<h2 id="rydd-opp-på-siden-og-poste-nye-innlegg">Rydd opp på siden og poste nye innlegg</h2>
<p>Siden dette er en eksempel side er det mye eksempelfyll fra før på siden. Dette kan man bytte ut. Ønsker man å legge til nye poster er dette beskrevet i posten som allerede ligger inne på siden fra før. Her må man huske at det er viktig å formatere navnet på filen rett og plasser den i rett mappe.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Lag nettside med Jekyll Første gjøremål for faget ADA525 som undervises ved HVL skal man lage seg en nettside. Den skal være være på github.io. Dette er da et forsøk på å]]></summary></entry><entry><title type="html">Test innlegg</title><link href="/jekyll/update/2023/08/09/test-post.html" rel="alternate" type="text/html" title="Test innlegg" /><published>2023-08-09T21:54:28+02:00</published><updated>2023-08-09T21:54:28+02:00</updated><id>/jekyll/update/2023/08/09/test-post</id><content type="html" xml:base="/jekyll/update/2023/08/09/test-post.html"><![CDATA[<p>Dette er en test for å se om det virker.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Dette er en test for å se om det virker.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2023/08/09/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-08-09T21:54:28+02:00</published><updated>2023-08-09T21:54:28+02:00</updated><id>/jekyll/update/2023/08/09/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2023/08/09/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>